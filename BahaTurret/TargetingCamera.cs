//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace BahaTurret
{
	public class TargetingCamera : MonoBehaviour
	{
		public static TargetingCamera Instance;
		public static bool ReadyForUse = false;
		public RenderTexture targetCamRenderTexture;

		public bool nvMode = false;


		private Texture2D reticleTex;
		public Texture2D ReticleTexture
		{
			get
			{
				if(reticleTex!=null)
				{
					return reticleTex;
				}
				else
				{
					reticleTex = GameDatabase.Instance.GetTexture("BDArmory/Textures/camReticle",false);
					return reticleTex;
				}
			}
		}


		Camera[] cameras;
		Transform cameraTransform;

		bool cameraEnabled = false;

		float currentFOV = 60;

		void Awake()
		{
			if(Instance)
			{
				Destroy (gameObject);
				return;
			}
			else
			{
				Instance = this;
			}
		}

		void Start()
		{
			GameEvents.onVesselChange.Add(VesselChange);
		}

		/*
		void LateUpdate()
		{
			if(cameraEnabled)
			{
				if(cameras!=null && cameras[0]!=null)
				{
					Quaternion cRotation = cameras[0].transform.rotation;
					cameras[2].transform.rotation = cRotation;
					cameras[3].transform.rotation = cRotation;
				}
				else
				{
					cameraEnabled = false;
				}
			}
		}
		*/

		public void UpdateCamRotation(Transform tf)
		{
			if(cameras!=null && cameras[0]!=null)
			{
				tf.rotation = cameras[0].transform.rotation;
			}
		}

		public void SetFOV(float fov)
		{
			if(cameras == null || cameras[0] == null)
			{
				return;
			}

			if(fov == currentFOV)
			{
				return;
			}

			for(int i = 0; i < cameras.Length; i++)
			{
				cameras[i].fieldOfView = fov;
			}
			currentFOV = fov;
		}

		void VesselChange(Vessel v)
		{
			if(!v.isActiveVessel)
			{
				return;
			}

			/*
			if(!FlightGlobals.ready)
			{
				return;
			}

			if(!FlightCamera.fetch)
			{
				return;
			}

			if(!FlightCamera.fetch.mainCamera)
			{
				return;
			}
			 */
			bool moduleFound = false;
			foreach(var mtc in v.FindPartModulesImplementing<ModuleTargetingCamera>())
			{
				Debug.Log ("Vessel switched to vessel with targeting camera.  Refreshing camera state.");

				if(mtc.cameraEnabled)
				{
					mtc.DelayedEnable();
				}
				else
				{
					mtc.DisableCamera();
				}
				moduleFound = true;
			}

			if(!moduleFound)
			{
				DisableCamera();
				ModuleTargetingCamera.windowIsOpen = false;
			}
		}

		public void EnableCamera(Transform parentTransform)
		{
			if(cameraTransform)
			{
				cameraTransform.gameObject.SetActive(true);
			}

			SetupCamera(parentTransform);

			for(int i = 0; i < cameras.Length; i++)
			{
				cameras[i].enabled = true;
			}

			cameraEnabled = true;

			ReadyForUse = true;
		}

		public void DisableCamera()
		{

			if(cameraTransform)
			{
				cameraTransform.parent = null;
				cameraTransform.gameObject.SetActive(false);
			}

			if(cameras!=null && cameras[0]!=null)
			{
				for(int i = 0; i < cameras.Length; i++)
				{
					cameras[i].enabled = false;
				}
			}

			cameraEnabled = false;
		}

		void SetupCamera(Transform parentTransform)
		{
			if(!parentTransform)
			{
				Debug.Log ("Targeting camera tried setup but parent transform is null");
				return;
			}

			if(cameraTransform == null)
			{
				cameraTransform = (new GameObject("targetCamObject")).transform;
			}

			Debug.Log ("Setting target camera parent");
			cameraTransform.parent = parentTransform;
			cameraTransform.localPosition = Vector3.zero;
			cameraTransform.localRotation = Quaternion.identity;

			if(targetCamRenderTexture == null)
			{
				int res = Mathf.RoundToInt(BDArmorySettings.TARGET_CAM_RESOLUTION);
				targetCamRenderTexture = new RenderTexture(res,res,16);
			}


			if(cameras != null && cameras[0] != null)
			{
				return;
			}

			//cam setup
			cameras = new Camera[FlightCamera.fetch.cameras.Length+2];
			//flight cameras
			for(int i = 0; i < FlightCamera.fetch.cameras.Length; i++)
			{
				Camera mainCam = FlightCamera.fetch.cameras[i];
				GameObject camObj = new GameObject();
				Camera newCam = camObj.AddComponent<Camera>();
				newCam.CopyFrom(mainCam);
				newCam.transform.parent = cameraTransform;
				newCam.transform.localRotation = Quaternion.identity;
				newCam.transform.localPosition = Vector3.zero;
				newCam.transform.localScale = Vector3.one;
				newCam.cullingMask = 557057;
				newCam.targetTexture = targetCamRenderTexture;
				cameras[i] = newCam;

				var cbr = camObj.AddComponent<CameraBulletRenderer>();
				cbr.resizeFactor = 3f;

				TGPCameraEffects ge = camObj.AddComponent<TGPCameraEffects>();
				ge.textureRamp = GameDatabase.Instance.GetTexture("BDArmory/Textures/grayscaleRamp", false);
				ge.rampOffset = 0;

			}
			//skybox camera
			GameObject skyCamObj = new GameObject();
			Camera skyCam = skyCamObj.AddComponent<Camera>();
			Camera mainSkyCam = FindCamera("Camera ScaledSpace");
			skyCam.CopyFrom(mainSkyCam);
			skyCam.transform.parent = mainSkyCam.transform;
			skyCam.transform.localRotation = Quaternion.identity;
			skyCam.transform.localPosition = Vector3.zero;
			skyCam.transform.localScale = Vector3.one;
			skyCam.targetTexture = targetCamRenderTexture;
			cameras[cameras.Length-2] = skyCam;
			skyCamObj.AddComponent<TGPCamRotator>();
			
			//galaxy camera
			GameObject galaxyCamObj = new GameObject();
			Camera galaxyCam = galaxyCamObj.AddComponent<Camera>();
			Camera mainGalaxyCam = FindCamera("GalaxyCamera");
			galaxyCam.CopyFrom(mainGalaxyCam);
			galaxyCam.transform.parent = mainGalaxyCam.transform;
			galaxyCam.transform.position = Vector3.zero;
			galaxyCam.transform.localRotation = Quaternion.identity;
			galaxyCam.transform.localScale = Vector3.one;
			galaxyCam.targetTexture = targetCamRenderTexture;
			cameras[cameras.Length-1] = galaxyCam;
			galaxyCamObj.AddComponent<TGPCamRotator>();


		}



		private Camera FindCamera(string cameraName)
		{
			foreach(var cam in Camera.allCameras)
			{
				if(cam.name == cameraName)
				{
					return cam;
				}
			}
			Debug.Log ("Couldn't find "+cameraName);
			return null;
		}



		void OnDestroy()
		{
			ReadyForUse = false;
		}
	}
}

